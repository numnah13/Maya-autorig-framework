# pylint: disable=trailing-whitespace

# pylint: disable=import-error

'''
@author: mstolarz
'''




import pymel.core as pm
import math
import autorig_settings as sett
from utils import xform_utils
from utils import name_utils
import maya.OpenMaya as om




class Control(object):
    '''
    This class generates an animation control
    '''
    def __init__(self, base_name="control", side="M", size=1.0, ctrl_color=None, aim_axis="x"):
        '''
        This is the constructor
        @param[in] base_name: string, this is the name that will be used as a base for all the names
        @param[in] side: string, the side used to generate
        @param[in] size: float, this is the size that will be used for the control
        @param ctrl_color: string, specify the color of the control, 
                        color definition in autorig_settings
        @param[in] aim_axis: string, this is the axis used to orient the control, 
                             takes: "x", "y", "z", "-x", "-y", "-z"
        '''
        
        self.base_name = base_name
        self.side = side
        self.size = size
        self.ctrl_color = ctrl_color
        self.aim_axis = aim_axis
        
        self.control = None
        self.control_grp = None
        self.control_name = None


    def build(self, shape_type=None):
        '''
        This function builds a control of a given shape.
        @param shape_type: string, name of the shape, valid names are defined in autorig_settings 
        '''
        if not shape_type or shape_type not in sett.ctrl_shp_types:
            raise ValueError("Shape type is missing or it is not valid")
        
        match shape_type:
            case "circle":
                self.__circle_ctrl()
            case "triangle":
                self.__triangle_ctrl()        
            case "square":
                self.__square_ctrl()        
            case "rectangle":
                self.__rectangle_ctrl()        
            case "rectangleRound":
                self.__rectangle_round_ctrl()        
            case "saddle":
                self.__saddle_ctrl()        
            case "cross":
                self.__cross_ctrl()        
            case "crossThin":
                self.__cross_thin_ctrl()        
            case "crossFat":
                self.__cross_fat_ctrl()        
            case "star":
                self.__star_ctrl()        
            case "starThin":
                self.__star_thin_ctrl()        
            case "starFat":
                self.__star_fat_ctrl()        
            case "arrowSingle":
                self.__arrow_single_ctrl()        
            case "arrowPointing":
                self.__arrow_pointing_ctrl()        
            case "arrowDouble":
                self.__arrow_doublel_ctrl()
            case "arrowDoubleSpherical":
                self.__arrow_double_spherical_ctrl()        
            case "arrowQuadruple":
                self.__arrow_quadruple_ctrl()        
            case "arrowQuadrupleRound":
                self.__arrow_quadruple_round_ctrl()               
            case "catFoot":
                self.__cat_foot_ctrl()        
            case "horseFoot":
                self.__horse_foot_ctrl()        
            case "cowFoot":
                self.__cow_foot_ctrl()
            case "birdFoot":
                self.__bird_foot_ctrl()
            case "wave":
                self.__wave_ctrl() 
            case "pinCircle":
                self.__pin_circle_ctrl()
            case "pinDiamond":
                self.__pin_diamond_ctrl()
            case "sphere":
                self.__sphere_ctrl()
            case "hemisphere":
                self.__hemisphere_ctrl()
            case "cylinder":
                self.__cylinder_ctrl()
            case "cylinderPointing":
                self.__cylinder_pointing_ctrl()
            case "cube":
                self.__cube_ctrl()
            case "cubeX":
                self.__cube_x_ctrl()
            case "cubeY":
                self.__cube_y_ctrl()
            case "cubeZ":
                self.__cube_z_ctrl()
            case "cuboid":
                self.__cuboid_ctrl()
            case "diamond":
                self.__diamond_ctrl()                
            case "pyramid":
                self.__pyramid_ctrl()  
            case "pyramidPointing":
                self.__pyramid_pointing_ctrl()
            case "axes":
                self.__axes_ctrl()
            case _:
                raise ValueError(f"Unrecognized shape name: {shape_type}")

              
                     
    def __circle_ctrl(self):
        '''
        TODO: I didn't copy dictionary result in here but used circle command
        This method creates a circle control
        '''   
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.7836116249, 0.0, -0.7836116249), (0.0, 0.0, -1.1081941876), 
                       (-0.7836116249, 0.0, -0.7836116249), (-1.1081941876, 0.0, -0.0), 
                       (-0.7836116249, -0.0, 0.7836116249), (-0.0, -0.0, 1.1081941876), 
                       (0.7836116249, -0.0, 0.7836116249), (1.1081941876, -0.0, 0.0) ]

        degree = 3
        self.control = pm.curve(d=degree, p=cv_pos_list, 
                                knot=[i for i in range(len(cv_pos_list) + degree - 1)],
                                n=self.control_name)
        pm.closeCurve( self.control, ch=False, o=True, ps=0, rpo=True )
             
        self.__finalize_ctrl()
    
    
    def __triangle_ctrl(self):
        '''
        This method creates a triangle control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 1.0), (0.8665558001, 0.0, -0.4990801994), 
                       (-0.8649616829, 0.0, -0.5018379092), (0.0, 0.0, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __square_ctrl(self):
        '''
        This method creates a square control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-1.0, 0.0, -1.0), (1.0, 0.0, -1.0), (1.0, 0.0, 1.0), 
                       (-1.0, 0.0, 1.0), (-1.0, 0.0, -1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __rectangle_ctrl(self):
        '''
        This method creates a rectangle control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-0.5, 0.0, -1.0), (0.5, 0.0, -1.0), (0.5, 0.0, 1.0), 
                       (-0.5, 0.0, 1.0), (-0.5, 0.0, -1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __rectangle_round_ctrl(self):
        '''
        This method creates a rounded rectangle control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.515828786, 0.0, -1.0357697893), (0.0, 0.0, -0.9787512498), 
                       (-0.515828786, 0.0, -1.0357697893), (-0.4766654327, 0.0, -0.0), 
                       (-0.515828786, -0.0, 1.0357697893), (-0.0, -0.0, 0.9787512498), 
                       (0.515828786, -0.0, 1.0357697893), (0.4766654327, -0.0, 0.0) ]
        degree = 3
        self.control = pm.curve(d=degree, p=cv_pos_list, k=[i for i in range(len(cv_pos_list)+degree-1)], 
                                per=False, n=self.control_name)
        pm.closeCurve( self.control, ch=False, o=True, ps=0, rpo=True )
    
        self.__finalize_ctrl()
    
    
    def __saddle_ctrl(self):
        '''
        This method creates a saddle control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.5836116249, -0.2779185368, -0.7836116249), 
                       (0.0, 0.1382376444, -1.1081941876), 
                       (-0.5836116249, -0.2779185368, -0.7836116249), 
                       (-0.6081941876, -0.6117623556, -0.0), 
                       (-0.5836116249, -0.2779185368, 0.7836116249), 
                       (-0.0, 0.1382376444, 1.1081941876), 
                       (0.5836116249, -0.2779185368, 0.7836116249), 
                       (0.6081941876, -0.6117623556, 0.0) ]

        self.control = pm.curve(d=3, p=cv_pos_list, k=[0,1,2,3,4,5,6,7,8,9], 
                                per=False, n=self.control_name)
        pm.closeCurve( self.control, ch=False, o=True, ps=0, rpo=True )
    
    
        self.__finalize_ctrl()
    
    
    def __cross_ctrl(self):
        '''
        This method creates a cross control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.3326194829, 0.0, 0.3326194829), (1.0, 0.0, 0.3326194829), 
                       (1.0, 0.0, -0.3326194829), (0.3326194829, 0.0, -0.3326194829), 
                       (0.3326194829, 0.0, -1.0), (-0.3326194829, 0.0, -1.0), 
                       (-0.3326194829, 0.0, -0.3326194829), (-1.0, 0.0, -0.3326194829), 
                       (-1.0, 0.0, 0.3326194829), (-0.3326194829, 0.0, 0.3326194829), 
                       (-0.3326194829, 0.0, 1.0), (0.3326194829, 0.0, 1.0), 
                       (0.3326194829, 0.0, 0.3326194829) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __cross_thin_ctrl(self):
        '''
        This method creates a thin cross control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.1188008635, 0.0, 0.1188008635), (1.0, 0.0, 0.1188008635), 
                       (1.0, 0.0, -0.1188008635), (0.1188008635, 0.0, -0.1188008635), 
                       (0.1188008635, 0.0, -1.0), (-0.1188008635, 0.0, -1.0), 
                       (-0.1188008635, 0.0, -0.1188008635), (-1.0, 0.0, -0.1188008635), 
                       (-1.0, 0.0, 0.1188008635), (-0.1188008635, 0.0, 0.1188008635), 
                       (-0.1188008635, 0.0, 1.0), (0.1188008635, 0.0, 1.0), 
                       (0.1188008635, 0.0, 0.1188008635) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __cross_fat_ctrl(self):
        '''
        This method creates a fat cross control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.5761320288, 0.0, 0.5761320288), (1.0, 0.0, 0.5761320288), 
                       (1.0, 0.0, -0.5761320288), (0.5761320288, 0.0, -0.5761320288), 
                       (0.5761320288, 0.0, -1.0), (-0.5761320288, 0.0, -1.0), 
                       (-0.5761320288, 0.0, -0.5761320288), (-1.0, 0.0, -0.5761320288), 
                       (-1.0, 0.0, 0.5761320288), (-0.5761320288, 0.0, 0.5761320288), 
                       (-0.5761320288, 0.0, 1.0), (0.5761320288, 0.0, 1.0), 
                       (0.5761320288, 0.0, 0.5761320288) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __star_ctrl(self):
        '''
        This method creates a star control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0010617638, 0.0, -0.9999994636), (0.2575558686, 0.0, -0.4450080042), 
                       (0.86655581, 0.0, -0.4990802109), (0.5143239044, 0.0, 0.0002730543), 
                       (0.8660253882, 0.0, 0.5), (0.2575558686, 0.0, 0.4444635873), 
                       (0.0, 0.0, 1.0), (-0.2569246103, 0.0, 0.4439173137), 
                       (-0.8670852184, 0.0, 0.4981598258), (-0.5136917707, 0.0, -0.0019089821), 
                       (-0.8649616838, 0.0, -0.5018379092), (-0.2564522607, 0.0, -0.4458266321), 
                       (0.0010617638, 0.0, -0.9999994636) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __star_thin_ctrl(self):
        '''
        This method creates a thin star control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0010617638, 0.0, -0.9999994636), (0.1136951829, 0.0, -0.1964438501), 
                       (0.86655581, 0.0, -0.4990802109), (0.2270425858, 0.0, 0.0001205368), 
                       (0.8660253882, 0.0, 0.5), (0.1136951829, 0.0, 0.1962035233), 
                       (0.0, 0.0, 1.0), (-0.1134165209, 0.0, 0.1959623768), 
                       (-0.8670852184, 0.0, 0.4981598258), (-0.2267635374, 0.0, -0.000842699), 
                       (-0.8649616838, 0.0, -0.5018379092), (-0.1132080074, 0.0, -0.1968052243), 
                       (0.0010617638, 0.0, -0.9999994636) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __star_fat_ctrl(self):
        '''
        This method creates a fat star control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0010617638, 0.0, -0.9999994636), (0.366023756, 0.0, -0.6324200726), 
                       (0.86655581, 0.0, -0.4990802109), (0.7309278886, 0.0, 0.0003880492), 
                       (0.8660253882, 0.0, 0.5), (0.366023756, 0.0, 0.6316463783), 
                       (0.0, 0.0, 1.0), (-0.3651266475, 0.0, 0.6308700453), 
                       (-0.8670852184, 0.0, 0.4981598258), (-0.7300295362, 0.0, -0.0027129368), 
                       (-0.8649616838, 0.0, -0.5018379092), (-0.3644553711, 0.0, -0.6335834601), 
                       (0.0010617638, 0.0, -0.9999994636) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __arrow_single_ctrl(self):
        '''
        This method creates a single arrow control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 1.0), (0.68, 0.0, 0.0), (0.34, 0.0, 0.0), (0.34, 0.0, -1.0), 
                       (-0.34, 0.0, -1.0), (-0.34, 0.0, 0.0), (-0.68, 0.0, 0.0), (0.0, 0.0, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()

    
    def __arrow_pointing_ctrl(self):
        '''
        This method creates a single arrow control with a pivot at its tip
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 0.0), (0.68, 0.0, -1.0), (0.2342222223, 0.0, -0.8865005408), 
                       (0.2342222223, 0.0, -2.0), (-0.2342222223, 0.0, -2.0), 
                       (-0.2342222223, 0.0, -0.8865005408), (-0.68, 0.0, -1.0), (0.0, 0.0, 0.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __arrow_doublel_ctrl(self):
        '''
        This method creates a double arrow control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 1.0), (0.4758161906, 0.0, 0.3752570998), 
                       (0.1986655249, 0.0, 0.3752570998), (0.1986655249, 0.0, -0.3752570998), 
                       (0.4758161906, 0.0, -0.3752570998), (0.0, 0.0, -1.0), 
                       (-0.4758161906, 0.0, -0.3752570998), (-0.1986655249, 0.0, -0.3752570998), 
                       (-0.1986655249, 0.0, 0.3752570998), (-0.4758161906, 0.0, 0.3752570998), 
                       (0.0, 0.0, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __arrow_double_spherical_ctrl(self):
        '''
        This method creates a arching double arrow control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 7.3e-09, 0.9989894558), 
                       (0.1877808974, -0.1849732392, 0.9682751677), 
                       (0.3755617948, -0.3609793913, 0.903619479), 
                       (0.5633428069, -0.5218485679, 0.8072888813), 
                       (0.3755617948, -0.5218485679, 0.8072888813), 
                       (0.1877808974, -0.5218485679, 0.8072888813), 
                       (0.1877808974, -0.6619419535, 0.6826600573), 
                       (0.1877808974, -0.7763487396, 0.5341017383), 
                       (0.1877808974, -0.8610585208, 0.3668213496), 
                       (0.1866826354, -0.913102147, 0.1877808974), 
                       (0.1866826354, -0.9306550695, 0.0), 
                       (0.1866826354, -0.913102147, -0.1877808974), 
                       (0.1877808974, -0.8610585208, -0.3668213496), 
                       (0.1877808974, -0.7763487396, -0.5341017383), 
                       (0.1877808974, -0.6619419535, -0.6826600573), 
                       (0.1877808974, -0.5218485679, -0.8072888813), 
                       (0.3755617948, -0.5218485679, -0.8072888813), 
                       (0.5633428069, -0.5218485679, -0.8072888813), 
                       (0.3755617948, -0.3609793913, -0.903619479), 
                       (0.1877808974, -0.1849732392, -0.9682751677), 
                       (0.0, 7.3e-09, -0.9989894558), 
                       (-0.1877808974, -0.1849732392, -0.9682751677), 
                       (-0.3755617948, -0.3609793913, -0.903619479), 
                       (-0.5633428069, -0.5218485679, -0.8072888813), 
                       (-0.3755617948, -0.5218485679, -0.8072888813), 
                       (-0.1877808974, -0.5218485679, -0.8072888813), 
                       (-0.1877808974, -0.6619419535, -0.6826600573), 
                       (-0.1877808974, -0.7763487396, -0.5341017383), 
                       (-0.1877808974, -0.8610585208, -0.3668213496), 
                       (-0.1866826354, -0.913102147, -0.1877808974), 
                       (-0.1866826354, -0.9306550695, 0.0), 
                       (-0.1877808974, -0.913102147, 0.1866826354), 
                       (-0.1877808974, -0.8610585208, 0.3668213496), 
                       (-0.1877808974, -0.7763487396, 0.5341017383), 
                       (-0.1877808974, -0.6619419535, 0.6826600573), 
                       (-0.1877808974, -0.5218485679, 0.8072888813), 
                       (-0.3755617948, -0.5218485679, 0.8072888813), 
                       (-0.5633428069, -0.5218485679, 0.8072888813), 
                       (-0.3755617948, -0.3609793913, 0.903619479), 
                       (-0.1877808974, -0.1849732392, 0.9682751677), 
                       (0.0, 7.3e-09, 0.9989894558) ]
        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __arrow_quadruple_ctrl(self):
        '''
        This method creates a quadruple arrow control (4 directions)
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-0.99980001, 0.0, 0.0), (-0.55544445, 0.0, -0.355484448), 
                       (-0.55544445, 0.0, -0.166633335), (-0.166633335, 0.0, -0.166633335), 
                       (-0.166633335, 0.0, -0.55544445), (-0.355484448, 0.0, -0.55544445), 
                       (0.0, 0.0, -0.99980001), (0.355484448, 0.0, -0.55544445), 
                       (0.166633335, 0.0, -0.55544445), (0.166633335, 0.0, -0.166633335), 
                       (0.55544445, 0.0, -0.166633335), (0.55544445, 0.0, -0.355484448), 
                       (0.99980001, 0.0, 0.0), (0.55544445, 0.0, 0.355484448), 
                       (0.55544445, 0.0, 0.166633335), (0.166633335, 0.0, 0.166633335), 
                       (0.166633335, 0.0, 0.55544445), (0.355484448, 0.0, 0.55544445), 
                       (0.0, 0.0, 0.99980001), (-0.355484448, 0.0, 0.55544445), 
                       (-0.166633335, 0.0, 0.55544445), (-0.166633335, 0.0, 0.166633335), 
                       (-0.55544445, 0.0, 0.166633335), (-0.55544445, 0.0, 0.355484448), 
                       (-0.99980001, 0.0, 0.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __arrow_quadruple_round_ctrl(self):
        '''
        This method creates a quadruple arrow control (4 directions) with a circular middle part
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-0.5498473616, -0.0, 0.1093357868), (-0.7362752008, 0.0, 0.1472550402), 
                       (-0.7012144769, 0.0, 0.2804857908), (-1.0, 0.0, 0.0), 
                       (-0.7012144769, 0.0, -0.2804857908), (-0.7362752008, 0.0, -0.1472550402), 
                       (-0.5498458103, 0.0, -0.1093428279), (-0.5177086678, 0.0, -0.2144470161), 
                       (-0.4661134168, 0.0, -0.3114913793), (-0.396634824, 0.0, -0.3966417939), 
                     (-0.311478444, 0.0, -0.4661132623), (-0.2144338971, 0.0, -0.517708776), 
                     (-0.109336938, 0.0, -0.549869843), (-0.1472550402, 0.0, -0.7362752008), 
                     (-0.2804857908, 0.0, -0.7012144769), (0.0, 0.0, -1.0), 
                     (0.2804857908, 0.0, -0.7012144769), (0.1472550402, 0.0, -0.7362752008), 
                     (0.109336938, 0.0, -0.549869843), (0.2144338971, 0.0, -0.517708776), 
                     (0.311478444, 0.0, -0.4661132623), (0.396634824, 0.0, -0.3966417939), 
                     (0.4661134168, 0.0, -0.3114913793), (0.5177086678, 0.0, -0.2144470161), 
                     (0.5498458103, 0.0, -0.1093428279), (0.7362752008, 0.0, -0.1472550402), 
                     (0.7012144769, 0.0, -0.2804857908), (1.0, 0.0, 0.0), 
                     (0.7012144769, 0.0, 0.2804857908), (0.7362752008, 0.0, 0.1472550402), 
                     (0.5498473616, -0.0, 0.1093357868), (0.5177125455, -0.0, 0.2144406485), 
                     (0.4661162423, -0.0, 0.3114844467), (0.3966373726, -0.0, 0.3966347726), 
                     (0.3114872255, -0.0, 0.4661138738), (0.2144439384, -0.0, 0.5177111443), 
                     (0.1093393671, -0.0, 0.5498468915), (0.1472550402, 0.0, 0.7362752008), 
                     (0.2804857908, 0.0, 0.7012144769), (0.0, 0.0, 1.0), 
                     (-0.2804857908, 0.0, 0.7012144769), (-0.1472550402, 0.0, 0.7362752008), 
                     (-0.1093393671, -0.0, 0.5498468915), (-0.2144439384, -0.0, 0.5177111443), 
                     (-0.3114872255, -0.0, 0.4661138738), (-0.3966373726, -0.0, 0.3966347726), 
                     (-0.4661162423, -0.0, 0.3114844467), (-0.5177125455, -0.0, 0.2144406485), 
                     (-0.5498473616, -0.0, 0.1093357868) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()         
    
    
    def __cat_foot_ctrl(self):
        '''
        This method creates a cat footprint control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.2081895757, -0.0, 0.9640895539), (0.0, -0.0, 0.9388377666), 
                       (-0.1702987633, -0.0, 0.9510169625), (-0.4284257691, -0.0, 1.0009658337), 
                       (-0.6663822461, -0.0, 0.967968945), (-0.8228410753, -0.0, 0.8405478001), 
                       (-0.884174689, -0.0, 0.5366104179), (-0.8253824187, 0.0, 0.3209173828), 
                       (-0.9239272626, 0.0, 0.3378525883), (-1.0921813052, 0.0, 0.3389991574), 
                     (-1.1977141296, 0.0, 0.3039421072), (-1.2814792041, 0.0, 0.2308028689), 
                     (-1.3313131112, -0.0, 0.1313898258), (-1.33882536, -0.0, 0.020443227), 
                     (-1.3037697862, -0.0, -0.085093087), (-1.3691820947, 0.0, -0.2128971496), 
                     (-1.2306256398, -0.0, -0.1688508657), (-1.1312302425, -0.0, -0.2187266678), 
                     (-1.0202740827, -0.0, -0.2261964239), (-0.9147415539, -0.0, -0.1911490697), 
                     (-0.8309747718, -0.0, -0.1180058333), (-0.7701869416, -0.0, -0.0296141508), 
                     (-0.7503010609, 0.0, 0.1043480201), (-0.6750002177, -0.0, -0.0895400404), 
                     (-0.5644274872, -0.0, -0.2146242747), (-0.4194285594, 0.0, -0.3073094785), 
                     (-0.5266251884, 0.0, -0.336889118), (-0.6140434466, 0.0, -0.4056212902), 
                     (-0.6689267479, 0.0, -0.5023372173), (-0.6821396075, 0.0, -0.6127517223), 
                     (-0.652558776, 0.0, -0.7199494839), (-0.5644253683, 0.0, -0.8271898588), 
                     (-0.4871095739, -0.0, -0.8622521162), (-0.4500807248, 0.0, -1.0009658337), 
                     (-0.3766963504, -0.0, -0.875456214), (-0.2694835983, -0.0, -0.8459182382), 
                     (-0.182089331, -0.0, -0.777148366), (-0.1271996967, -0.0, -0.6804397106), 
                     (-0.1139883868, -0.0, -0.5700211525), (-0.143565955, 0.0, -0.462826252), 
                     (-0.2122983955, 0.0, -0.3754064143), (-0.0451421571, -0.0, -0.396559), 
                     (0.073177842, -0.0, -0.3965589863), (0.2624031465, 0.0, -0.3754064143), 
                     (0.1936707061, 0.0, -0.462826252), (0.1640931379, 0.0, -0.5700211525), 
                     (0.1773044478, 0.0, -0.6804397106), (0.2321940821, 0.0, -0.777148366), 
                     (0.3195883494, 0.0, -0.8459182382), (0.4268011015, 0.0, -0.875456214), 
                     (0.5001854759, 0.0, -1.0009658337), (0.537214325, 0.0, -0.8622521162), 
                     (0.6339315038, 0.0, -0.8073651195), (0.7026635271, 0.0, -0.7199494839), 
                     (0.7322443586, 0.0, -0.6127517223), (0.719031499, 0.0, -0.5023372173), 
                     (0.6641481977, 0.0, -0.4056212902), (0.5767299395, 0.0, -0.336889118), 
                     (0.4695333105, 0.0, -0.3073094785), (0.6147849815, -0.0, -0.2656778895), 
                     (0.758117068, -0.0, -0.1561562983), (0.8273114251, 0.0, -0.040472402), 
                     (0.8983602966, 0.0, -0.1260156046), (0.9965130725, 0.0, -0.1782921713), 
                     (1.1072403862, 0.0, -0.1885339313), (1.2136234724, 0.0, -0.1561347707), 
                     (1.2991441997, 0.0, -0.0850485844), (1.4440753466, 0.0, -0.0965780669), 
                     (1.3514236913, 0.0, 0.0130956278), (1.3616726004, 0.0, 0.1238284897), 
                     (1.3292342154, 0.0, 0.2301926417), (1.2581848407, 0.0, 0.3157400425), 
                     (1.1600346335, 0.0, 0.3680131016), (1.0493048363, 0.0, 0.3782642389), 
                     (0.942939106, 0.0, 0.3458238517), (0.8573932584, 0.0, 0.274774705), 
                     (0.887515697, 0.0, 0.4046864317), (0.8950855925, -0.0, 0.546283095), 
                     (0.8885129412, -0.0, 0.7098690612), (0.8015564827, -0.0, 0.8671172049), 
                     (0.6516109641, 0.0, 0.9790073647), (0.4506460257, -0.0, 1.0), 
                     (0.2081895757, -0.0, 0.9640895539) ]
        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()  
    
    
    def __horse_foot_ctrl(self):
        '''
        This method creates a horse footprint control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.3926462374, 0.0, -0.9262368028), (0.0, 0.0, -1.0260340642), 
                       (-0.3926462374, 0.0, -0.9262368028), (-0.7255156445, 0.0, -0.6420382885), 
                       (-0.9479318716, 0.0, -0.078434938), (-0.9120302757, -0.0, 0.4232797022), 
                       (-0.8060931724, -0.0, 0.8680595474), (-0.290206244, -0.0, 1.1551224654), 
                       (-0.1324978998, -0.0, 0.1671118268), (0.0, -0.0, -0.2528360023), 
                     (0.1324978998, -0.0, 0.1671118268), (0.290206244, -0.0, 1.1551224654), 
                     (0.8060931724, -0.0, 0.8680595474), (0.9120302757, 0.0, 0.4232797022), 
                     (0.9479318716, 0.0, -0.078434938), (0.7255156445, 0.0, -0.6420382885) ]
        
        degree = 3
        self.control = pm.curve(d=degree, p=cv_pos_list, 
                                knot=[i for i in range(len(cv_pos_list) + degree - 1)],
                                n=self.control_name)
        pm.closeCurve( self.control, ch=False, o=True, ps=0, rpo=True )
        
        self.__finalize_ctrl() 
    
    
    def __cow_foot_ctrl(self):
        '''
        This method creates a cow footprint control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.1834288021, 0.0, -0.2375747078), (0.0, 0.0, 0.1144438394), 
                       (-0.1834288021, 0.0, -0.2375747078), (-3.513e-07, 0.0, -0.7860777182), 
                       (-0.1229542437, 0.0, -1.1611661621), (-0.5753672564, -0.0, -0.6601724624), 
                       (-1.0927040645, -0.0, 0.6067094048), (-0.2015321161, -0.0, 1.1999157809), 
                       (-0.0574332114, -0.0, 0.5924271445), (0.0, -0.0, 0.1461286112), 
                     (0.0574332114, -0.0, 0.5924271445), (0.2015321161, -0.0, 1.1999157809), 
                     (1.0927040645, -0.0, 0.6067094048), (0.5753672564, 0.0, -0.6601724624), 
                     (0.1229542437, 0.0, -1.1611661621), (3.513e-07, 0.0, -0.7860777182) ]

        degree = 3
        self.control = pm.curve(d=degree, p=cv_pos_list, 
                                knot=[i for i in range(len(cv_pos_list) + degree - 1)],
                                n=self.control_name)
        pm.closeCurve( self.control, ch=False, o=True, ps=0, rpo=True )
    
        self.__finalize_ctrl()
    
    
    def __bird_foot_ctrl(self):
        '''
        This method creates a bird footprint control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 1.0), (-0.0703932196, -0.0, 0.8045981526), 
                       (-0.0140936241, -0.0, 0.7460509567), (-0.0681262165, 0.0, 0.1177092716), 
                       (-0.13621068, 0.0, -0.0005061863), (-0.6523600063, 0.0, -0.3622388537), 
                       (-0.73199898, 0.0, -0.3413367569), (-0.8649616838, 0.0, -0.5018379092), 
                       (-0.6616057754, 0.0, -0.4632613957), (-0.6382291542, 0.0, -0.3865930878), 
                     (-0.0680009723, 0.0, -0.118215546), (-0.0133084886, 0.0, -0.746065347), 
                     (-0.0703932196, 0.0, -0.8045981526), (0.0010617638, 0.0, -0.9999994636), 
                     (0.0703932196, 0.0, -0.8045981526), (0.0149002552, 0.0, -0.7460352934), 
                     (0.0682936013, 0.0, -0.1179984733), (0.6394534384, 0.0, -0.3845646061), 
                     (0.6616057754, 0.0, -0.4632613957), (0.86655581, 0.0, -0.4990802109), 
                     (0.7319990396, 0.0, -0.3413367569), (0.6535319872, 0.0, -0.360120211), 
                     (0.1363783032, 0.0, 7.24032e-05), (0.0682936013, 0.0, 0.1178541183), 
                     (0.0141306299, 0.0, 0.7460502372), (0.0703932196, -0.0, 0.8045981526), 
                     (0.0, 0.0, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl() 


    def __wave_ctrl(self):
        '''
        This method creates a wave control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 1.0), (-0.5, 0.0, 0.5), (0.0, 0.0, 0.0), 
                       (0.5, 0.0, -0.5), (0.0, 0.0, -1.0) ]

        self.control = pm.curve(d=3, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl() 
            
    
    def __pin_circle_ctrl(self):
        '''
        This method creates a pin control with circle head
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 0.0), (-0.0006370604, 0.0, -1.2000010014), 
                       (0.1034763306, 0.0, -1.2136160135), (0.1999080479, 0.0, -1.2535368204), 
                       (0.2827300727, 0.0, -1.317044735), (0.3463039398, 0.0, -1.3998161554), 
                       (0.3863015473, 0.0, -1.4962160587), (0.3999998868, 0.0, -1.5996814966), 
                       (0.3864663243, 0.0, -1.7031686306), (0.346622318, 0.0, -1.7996320724), 
                     (0.283180356, 0.0, -1.8825047016), (0.2004595697, 0.0, -1.9461444616), 
                     (0.1040915847, 0.0, -1.9862188101), (0.0006370611, 0.0, -1.9999995232), 
                     (-0.1028608307, 0.0, -1.9865484238), (-0.1993559897, 0.0, -1.9467811584), 
                     (-0.2822790742, 0.0, -1.8834052086), (-0.3459846675, 0.0, -1.8007352352), 
                     (-0.386135757, 0.0, -1.7043991089), (-0.3999988437, 0.0, -1.6009556055), 
                     (-0.3866301775, 0.0, -1.4974470139), (-0.346939832, 0.0, -1.4009202719), 
                     (-0.2836299539, 0.0, -1.3179467916), (-0.2010106146, 0.0, -1.2541753054), 
                     (-0.1047065631, 0.0, -1.2139475346), (-0.0006370604, 0.0, -1.2000010014) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl() 
    
    
    def __pin_diamond_ctrl(self):
        '''
        This method creates a pin control with diamond head
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 0.0, 0.0), (0.0, 0.0, -1.2), (0.4, 0.0, -1.6), (0.0, -0.4, -1.6), 
                       (0.0, 0.0, -1.2), (0.0, 0.4, -1.6), (0.4, 0.0, -1.6), (0.0, 0.0, -2.0), 
                       (0.0, -0.4, -1.6), (-0.4, 0.0, -1.6), 
                     (0.0, 0.0, -2.0), (0.0, 0.4, -1.6), (-0.4, 0.0, -1.6), (0.0, 0.0, -1.2) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl() 
    
    
    def __sphere_ctrl(self):
        '''
        This method creates a sphere control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 1.0, 0.0), (0.0, 0.92388, 0.382683), (0.0, 0.707107, 0.707107), 
                       (0.0, 0.382683, 0.92388), (0.0, 0.0, 1.0), (0.0, -0.382683, 0.92388), 
                       (0.0, -0.707107, 0.707107), (0.0, -0.92388, 0.382683), (0.0, -1.0, 0.0), 
                       (0.0, -0.92388, -0.382683), 
                     (0.0, -0.707107, -0.707107), (0.0, -0.382683, -0.92388), (0.0, 0.0, -1.0), 
                     (0.0, 0.382683, -0.92388), (0.0, 0.707107, -0.707107), 
                     (0.0, 0.92388, -0.382683), (0.0, 1.0, 0.0), 
                     (0.382683, 0.92388, 0.0), (0.707107, 0.707107, 0.0), 
                     (0.92388, 0.382683, 0.0), 
                     (1.0, 0.0, 0.0), (0.92388, -0.382683, 0.0), (0.707107, -0.707107, 0.0), 
                     (0.382683, -0.92388, 0.0), (0.0, -1.0, 0.0), (-0.382683, -0.92388, 0.0), 
                     (-0.707107, -0.707107, 0.0), (-0.92388, -0.382683, 0.0), (-1.0, 0.0, 0.0), 
                     (-0.92388, 0.382683, 0.0), 
                     (-0.707107, 0.707107, 0.0), (-0.382683, 0.92388, 0.0), (0.0, 1.0, 0.0), 
                     (0.0, 0.92388, -0.382683), (0.0, 0.707107, -0.707107), 
                     (0.0, 0.382683, -0.92388), (0.0, 0.0, -1.0), (-0.382683, 0.0, -0.92388), 
                     (-0.707107, 0.0, -0.707107), (-0.92388, 0.0, -0.382683), 
                     (-1.0, 0.0, 0.0), (-0.92388, 0.0, 0.382683), (-0.707107, 0.0, 0.707107), 
                     (-0.382683, 0.0, 0.92388), (0.0, 0.0, 1.0), (0.382683, 0.0, 0.92388), 
                     (0.707107, 0.0, 0.707107), (0.92388, 0.0, 0.382683), (1.0, 0.0, 0.0), 
                     (0.92388, 0.0, -0.382683), 
                     (0.707107, 0.0, -0.707107), (0.382683, 0.0, -0.92388), (0.0, 0.0, -1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __hemisphere_ctrl(self):
        '''
        This method creates a hemisphere control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-1.0003755472, 0.0, 1e-10), (-0.9876097768, 0.0, -0.156360668), 
                       (-0.9504163584, 0.0, -0.3087695144), (-0.8903788544, 0.0, -0.453712836), 
                       (-0.8089092096, 0.0, -0.5877820016), (-0.7073722456, 0.0, -0.7073722456), 
                       (-0.5877820016, 0.0, -0.8089092096), (-0.453712836, 0.0, -0.8903788544), 
                       (-0.3087695144, 0.0, -0.9504163584), (-0.156360668, 0.0, -0.987609936), 
                        (0.0, 0.0, -1.0003752288), (0.0, 0.1563601904, -0.987609936), 
                        (0.0, 0.3087696736, -0.9504163584), (0.0, 0.4537126768, -0.8903788544), 
                        (0.0, 0.5877820016, -0.8089092096), (0.0, 0.7073722456, -0.7073722456), 
                        (0.0, 0.8089093688, -0.5877820016), (0.0, 0.8903788544, -0.453712836), 
                        (0.0, 0.9504163584, -0.3087695144), (0.0, 0.9876097768, -0.156360668), 
                        (0.0, 1.0003755472, 0.0), (0.0, 0.9876097768, 0.156360668), 
                        (0.0, 0.9504163584, 0.3087695144), (0.0, 0.8903788544, 0.453712836), 
                        (0.0, 0.8089093688, 0.5877820016), (0.0, 0.7073722456, 0.7073722456), 
                        (0.0, 0.5877820016, 0.8089092096), (0.0, 0.4537126768, 0.8903788544), 
                        (0.0, 0.3087696736, 0.9504163584), (0.0, 0.1563601904, 0.987609936), 
                        (0.0, 0.0, 1.0003755472), (-0.156360668, 0.0, 0.9876097768), 
                        (-0.3087695144, 0.0, 0.9504163584), (-0.453712836, 0.0, 0.8903788544), 
                        (-0.5877820016, 0.0, 0.8089092096), (-0.7073722456, 0.0, 0.7073722456), 
                        (-0.8089092096, 0.0, 0.5877820016), (-0.8903788544, 0.0, 0.453712836), 
                        (-0.9504163584, 0.0, 0.3087695144), (-0.9876097768, 0.0, 0.156360668), 
                        (-1.0003755472, 0.0, 1e-10), (-0.987609936, 0.1563601904, 0.0), 
                        (-0.9504163584, 0.3087696736, 0.0), (-0.8903788544, 0.4537126768, 0.0), 
                        (-0.8089092096, 0.5877820016, 0.0), (-0.7073722456, 0.7073722456, 0.0), 
                        (-0.5877820016, 0.8089093688, 0.0), (-0.453712836, 0.8903788544, 0.0), 
                        (-0.3087695144, 0.9504163584, 0.0), (-0.156360668, 0.9876097768, 0.0), 
                        (0.0, 1.0003755472, 0.0), (0.156360668, 0.9876097768, 0.0), 
                        (0.3087695144, 0.9504163584, 0.0), (0.453712836, 0.8903788544, 0.0), 
                        (0.5877820016, 0.8089093688, 0.0), (0.7073722456, 0.7073722456, 0.0), 
                        (0.8089092096, 0.5877820016, 0.0), (0.8903788544, 0.4537126768, 0.0), 
                        (0.9504163584, 0.3087696736, 0.0), (0.987609936, 0.1563601904, 0.0), 
                        (1.0003755472, 0.0, 1e-10), (0.9876097768, 0.0, 0.156360668), 
                        (0.9504163584, 0.0, 0.3087695144), (0.8903788544, 0.0, 0.453712836), 
                        (0.8089092096, 0.0, 0.5877820016), (0.7073722456, 0.0, 0.7073722456), 
                        (0.5877820016, 0.0, 0.8089092096), (0.453712836, 0.0, 0.8903788544), 
                        (0.3087695144, 0.0, 0.9504163584), (0.156360668, 0.0, 0.9876097768), 
                        (0.0, 0.0, 1.0003755472), (0.156360668, 0.0, 0.9876097768), 
                        (0.3087695144, 0.0, 0.9504163584), (0.453712836, 0.0, 0.8903788544), 
                        (0.5877820016, 0.0, 0.8089092096), (0.7073722456, 0.0, 0.7073722456), 
                        (0.8089092096, 0.0, 0.5877820016), (0.8903788544, 0.0, 0.453712836), 
                        (0.9504163584, 0.0, 0.3087695144), (0.9876097768, 0.0, 0.156360668), 
                        (1.0003755472, 0.0, 1e-10), (0.9876097768, 0.0, -0.156360668), 
                        (0.9504163584, 0.0, -0.3087695144), (0.8903788544, 0.0, -0.453712836), 
                        (0.8089092096, 0.0, -0.5877820016), (0.7073722456, 0.0, -0.7073722456), 
                        (0.5877820016, 0.0, -0.8089092096), (0.453712836, 0.0, -0.8903788544), 
                        (0.3087695144, 0.0, -0.9504163584), (0.156360668, 0.0, -0.987609936), 
                        (0.0, 0.0, -1.0003752288) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __cylinder_ctrl(self):
        '''
        This method creates a cylinder control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, -1.0, 1.0), (0.2586908441, -1.0, 0.9659601685), 
                       (0.4997701026, -1.0, 0.8661580944), (0.7068251811, -1.0, 0.7073882692), 
                       (0.8657598395, -1.0, 0.500459689), (0.9657538598, -1.0, 0.2594599819), 
                       (0.9999996829, -1.0, 0.0007963267), (0.9661658647, -1.0, -0.2579215421), 
                       (0.8665558001, -1.0, -0.4990801994), (0.7079509086, -1.0, -0.7062616448), 
                        (0.501148958, -1.0, -0.8653610356), (0.2602289552, -1.0, -0.9655469387), 
                        (0.0015926529, -1.0, -0.9999987317), (0.0015926529, 1.0, -0.9999987317), 
                        (0.2602289552, 1.0, -0.9655469387), (0.501148958, 1.0, -0.8653610356), 
                        (0.7079509086, 1.0, -0.7062616448), (0.8665558001, 1.0, -0.4990801994), 
                        (0.9661658647, 1.0, -0.2579215421), (0.9999996829, 1.0, 0.0007963267), 
                        (0.9657538598, 1.0, 0.2594599819), (0.8657598395, 1.0, 0.500459689), 
                        (0.7068251811, 1.0, 0.7073882692), (0.4997701026, 1.0, 0.8661580944), 
                        (0.2586908441, 1.0, 0.9659601685), (0.0, 1.0, 1.0), 
                        (-0.0031853018, -1.0, 0.9999949269), (-0.2617664063, -1.0, 0.9651312597), 
                        (-0.5025265422, -1.0, 0.8645617817), (-0.7090748404, -1.0, 0.705133229), 
                        (-0.8673495626, -1.0, 0.4976994438), (-0.9665754188, -1.0, 0.2563824482), 
                        (-0.9999971464, -1.0, -0.0023889781), (-0.9653394053, -1.0, -0.2609977636), 
                        (-0.8649616829, -1.0, -0.5018379092), (-0.7056976607, -1.0, -0.7085130992), 
                        (-0.4983899796, -1.0, -0.8669529562), (-0.2571520767, -1.0, -0.9663709482), 
                        (0.0015926529, -1.0, -0.9999987317), (0.0015926529, 1.0, -0.9999987317), 
                        (-0.2571520767, 1.0, -0.9663709482), (-0.4983899796, 1.0, -0.8669529562), 
                        (-0.7056976607, 1.0, -0.7085130992), (-0.8649616829, 1.0, -0.5018379092), 
                        (-0.9653394053, 1.0, -0.2609977636), (-0.9999971464, 1.0, -0.0023889781), 
                        (-0.9665754188, 1.0, 0.2563824482), (-0.8673495626, 1.0, 0.4976994438), 
                        (-0.7090748404, 1.0, 0.705133229), (-0.5025265422, 1.0, 0.8645617817), 
                        (-0.2617664063, 1.0, 0.9651312597), (-0.0031853018, 1.0, 0.9999949269) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __cylinder_pointing_ctrl(self):
        '''
        This method creates a pointing cylinder control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, -1.0, 1.0), (0.2586908441, -1.0, 0.9659601685), 
                       (0.4997701026, -1.0, 0.8661580944), (0.7068251811, -1.0, 0.7073882692), 
                       (0.8657598395, -1.0, 0.500459689), (0.9657538598, -1.0, 0.2594599819), 
                       (0.9999996829, -1.0, 0.0007963267), (0.9661658647, -1.0, -0.2579215421), 
                       (0.8665558001, -1.0, -0.4990801994), (0.7079509086, -1.0, -0.7062616448), 
                        (0.501148958, -1.0, -0.8653610356), (0.2602289552, -1.0, -0.9655469387), 
                        (0.0015926529, -1.0, -0.9999987317), (0.0015926529, 1.0, -0.9999987317), 
                        (0.2602289552, 1.0, -0.9655469387), (0.501148958, 1.0, -0.8653610356), 
                        (0.7079509086, 1.0, -0.7062616448), (0.8665558001, 1.0, -0.4990801994), 
                        (0.9661658647, 1.0, -0.2579215421), (0.9999996829, 1.0, 0.0007963267), 
                        (0.9657538598, 1.0, 0.2594599819), (0.8657598395, 1.0, 0.500459689), 
                        (0.7068251811, 1.0, 0.7073882692), (0.4997701026, 1.0, 0.8661580944), 
                        (0.2586908441, 1.0, 0.9659601685), (0.0, 1.0, 1.0), 
                        (-0.0031853018, -1.0, 0.9999949269), (-0.2617664063, -1.0, 0.9651312597), 
                        (-0.5025265422, -1.0, 0.8645617817), (-0.7090748404, -1.0, 0.705133229), 
                        (-0.8673495626, -1.0, 0.4976994438), (-0.9665754188, -1.0, 0.2563824482), 
                        (-1.340062614, -1.0, -0.0023889781), (-0.9653394053, -1.0, -0.2609977636), 
                        (-0.8649616829, -1.0, -0.5018379092), (-0.7056976607, -1.0, -0.7085130992), 
                        (-0.4983899796, -1.0, -0.8669529562), (-0.2571520767, -1.0, -0.9663709482), 
                        (0.0015926529, -1.0, -0.9999987317), (0.0015926529, 1.0, -0.9999987317), 
                        (-0.2571520767, 1.0, -0.9663709482), (-0.4983899796, 1.0, -0.8669529562), 
                        (-0.7056976607, 1.0, -0.7085130992), (-0.8649616829, 1.0, -0.5018379092), 
                        (-0.9653394053, 1.0, -0.2609977636), (-1.340062614, 1.0, -0.0023889781), 
                        (-0.9665754188, 1.0, 0.2563824482), (-0.8673495626, 1.0, 0.4976994438), 
                        (-0.7090748404, 1.0, 0.705133229), (-0.5025265422, 1.0, 0.8645617817), 
                        (-0.2617664063, 1.0, 0.9651312597), (-0.0031853018, 1.0, 0.9999949269) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __cube_ctrl(self):
        '''
        This method creates a cube control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-1.0, 1.0, -1.0), (1.0, 1.0, -1.0), (1.0, 1.0, 1.0), (-1.0, 1.0, 1.0), 
                       (-1.0, 1.0, -1.0), (-1.0, -1.0, -1.0), (1.0, -1.0, -1.0), (1.0, 1.0, -1.0), 
                       (1.0, 1.0, 1.0), (1.0, -1.0, 1.0), 
                     (1.0, -1.0, -1.0), (-1.0, -1.0, -1.0), (-1.0, -1.0, 1.0), (1.0, -1.0, 1.0), 
                     (1.0, 1.0, 1.0), (-1.0, 1.0, 1.0), (-1.0, -1.0, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()


    def __cube_x_ctrl(self):
        '''
        This method creates a cube control sitting on X axis (offset half of its width in +X)
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 1.0, -1.0), (2.0, 1.0, -1.0), (2.0, 1.0, 1.0), (0.0, 1.0, 1.0), 
                       (0.0, 1.0, -1.0), (0.0, -1.0, -1.0), (2.0, -1.0, -1.0), (2.0, 1.0, -1.0), 
                       (2.0, 1.0, 1.0), (2.0, -1.0, 1.0), 
                     (2.0, -1.0, -1.0), (0.0, -1.0, -1.0), (0.0, -1.0, 1.0), (2.0, -1.0, 1.0), 
                     (2.0, 1.0, 1.0), (0.0, 1.0, 1.0), (0.0, -1.0, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()


    def __cube_y_ctrl(self):
        '''
        This method creates a cube control sitting on Y axis (offset half of its width in +Y)
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-1.0, 2.0, -1.0), (1.0, 2.0, -1.0), (1.0, 2.0, 1.0), (-1.0, 2.0, 1.0), 
                       (-1.0, 2.0, -1.0), (-1.0, 0.0, -1.0), (1.0, 0.0, -1.0), (1.0, 2.0, -1.0), 
                       (1.0, 2.0, 1.0), (1.0, 0.0, 1.0), 
                     (1.0, 0.0, -1.0), (-1.0, 0.0, -1.0), (-1.0, 0.0, 1.0), (1.0, 0.0, 1.0), 
                     (1.0, 2.0, 1.0), (-1.0, 2.0, 1.0), (-1.0, 0.0, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()


    def __cube_z_ctrl(self):
        '''
        This method creates a cube control sitting on Z axis (offset half of its width in +Z)
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-1.0, 1.0, 0.0), (1.0, 1.0, 0.0), (1.0, 1.0, 2.0), (-1.0, 1.0, 2.0), 
                       (-1.0, 1.0, 0.0), (-1.0, -1.0, 0.0), (1.0, -1.0, 0.0), (1.0, 1.0, 0.0), 
                       (1.0, 1.0, 2.0), (1.0, -1.0, 2.0), 
                     (1.0, -1.0, 0.0), (-1.0, -1.0, 0.0), (-1.0, -1.0, 2.0), (1.0, -1.0, 2.0), 
                     (1.0, 1.0, 2.0), (-1.0, 1.0, 2.0), (-1.0, -1.0, 2.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()

    
    def __cuboid_ctrl(self):
        '''
        This method creates a cuboid control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-0.5, 0.5, -1.0), (0.5, 0.5, -1.0), (0.5, 0.5, 1.0), (-0.5, 0.5, 1.0), 
                       (-0.5, 0.5, -1.0), (-0.5, -0.5, -1.0), (0.5, -0.5, -1.0), (0.5, 0.5, -1.0), 
                       (0.5, 0.5, 1.0), (0.5, -0.5, 1.0), 
                     (0.5, -0.5, -1.0), (-0.5, -0.5, -1.0), (-0.5, -0.5, 1.0), (0.5, -0.5, 1.0), 
                     (0.5, 0.5, 1.0), (-0.5, 0.5, 1.0), (-0.5, -0.5, 1.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
       
    def __diamond_ctrl(self):
        '''
        This method creates a diamond control
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (0.0, 1.0, 0.0), (1.0, 0.0, 0.0), (0.0, 0.0, -1.0), (0.0, 1.0, 0.0), 
                       (0.0, 0.0, 1.0), (1.0, 0.0, 0.0), (0.0, -1.0, 0.0), (0.0, 0.0, -1.0), 
                       (-1.0, 0.0, 0.0), (0.0, -1.0, 0.0), 
                     (0.0, 0.0, 1.0), (-1.0, 0.0, 0.0), (0.0, 1.0, 0.0) ]

        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()


    def __pyramid_ctrl(self):
        '''
        This method creates a pyramic control with a pivot at its base
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-0.6, -0.6, 0.0), (0.6, -0.6, 0.0), (0.6, 0.6, 0.0), (-0.6, 0.6, 0.0), 
                       (-0.6, -0.6, 0.0), (0.0, 0.0, -2.4), (0.6, -0.6, 0.0), (0.6, 0.6, 0.0), 
                       (0.0, 0.0, -2.4), (-0.6, 0.6, 0.0), 
                     (-0.6, -0.6, 0.0), (0.0, 0.0, -2.4), (0.6, -0.6, 0.0) ]
        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
         
    
    def __pyramid_pointing_ctrl(self):
        '''
        This method creates a pyramic control with a pivot on its tip
        '''        
        self.__build_name()
        if not self.control_name:
            return
    
        cv_pos_list = [ (-0.6, -0.6, 2.4), (0.6, -0.6, 2.4), (0.6, 0.6, 2.4), (-0.6, 0.6, 2.4), 
                       (-0.6, -0.6, 2.4), (0.0, 0.0, 0.0), (0.6, -0.6, 2.4), (0.6, 0.6, 2.4), 
                       (0.0, 0.0, 0.0), (-0.6, 0.6, 2.4), 
                     (-0.6, -0.6, 2.4), (0.0, 0.0, 0.0), (0.6, -0.6, 2.4) ]


        self.control = pm.curve(d=1, p=cv_pos_list, n=self.control_name)
    
        self.__finalize_ctrl()
    
    
    def __axes_ctrl(self):
        '''
        This method creates an axes control
        '''        
        self.__build_name()
        if not self.control_name:
            return
        
        self.ctrl_color = None # disable custom colors
    
        cv_pos_list1 = [ (0.3962352276, 0.3962352276, 0.0), 
                        (0.3962352276, 0.3962352276, 0.3962352276), 
                        (0.0, 0.3962352276, 0.3962352276), (0.0, 0.3962352276, 0.0), 
                        (0.3962352276, 0.3962352276, 0.0), (0.3962352276, 0.0, 0.0), 
                        (0.3962352276, 0.0, 0.3962352276), 
                        (0.3962352276, 0.3962352276, 0.3962352276), 
                        (0.3962352276, 0.0, 0.3962352276), (0.0, 0.0, 0.3962352276), 
                        (0.0, 0.3962352276, 0.3962352276) ]
        cv_pos_list2 = [ (0.0, 0.0, 0.0), (2.0, 0.0, 0.0), (1.623121253, 0.1014450738, 0.0), 
                        (1.623121253, 0.050722501, -0.0878540012), (2.0, 0.0, 0.0), 
                        (1.623121253, 0.050722501, -0.0878540012), 
                        (1.623121253, -0.0507225729, -0.0878540012), 
                        (2.0, 0.0, 0.0), (1.623121253, -0.1014450738, 1.61e-08), 
                        (1.623121253, -0.0507225729, -0.0878540012), 
                        (1.623121253, -0.1014450738, 1.61e-08), 
                        (1.623121253, -0.050722501, 0.0878540731), 
                        (2.0, 0.0, 0.0), (1.623121253, -0.050722501, 0.0878540731), 
                        (1.623121253, 0.0507225729, 0.0878540012), 
                        (1.623121253, 0.1014450738, 0.0), 
                        (2.0, 0.0, 0.0), (1.623121253, 0.0507225729, 0.0878540012) ]
        cv_pos_list4 = [ (0.0, 0.0, 0.0), (0.0, 0.0, 2.0), 
                        (-0.0878540012, 0.0507225729, 1.623121253), 
                        (0.0, 0.1014450738, 1.623121253), (0.0, 0.0, 2.0), 
                        (0.0878540012, 0.050722501, 1.623121253), 
                        (0.0, 0.1014450738, 1.623121253), 
                        (0.0878540012, 0.050722501, 1.623121253), 
                        (0.0878540012, -0.0507225729, 1.623121253), (0.0, 0.0, 2.0), 
                      (0.0878540012, -0.0507225729, 1.623121253), 
                      (-1.61e-08, -0.1014450738, 1.623121253), 
                      (0.0, 0.0, 2.0), (-1.61e-08, -0.1014450738, 1.623121253), 
                      (-0.0878540731, -0.050722501, 1.623121253), (0.0, 0.0, 2.0), 
                      (-0.0878540731, -0.050722501, 1.623121253), 
                      (-0.0878540012, 0.0507225729, 1.623121253), 
                      (0.0, 0.0, 2.0), (0.0, 0.0, 0.0) ]
        cv_pos_list3 = [ (0.050722501, 1.623121253, 0.0878540012), 
                        (-0.0507225729, 1.623121253, 0.0878540012), (0.0, 2.0, 0.0), 
                        (0.050722501, 1.623121253, 0.0878540012), 
                        (0.1014450738, 1.623121253, 0.0), 
                        (0.0, 2.0, 0.0), (0.1014450738, 1.623121253, 0.0), 
                        (0.0507225729, 1.623121253, -0.0878540012), (0.0, 2.0, 0.0), 
                        (0.0507225729, 1.623121253, -0.0878540012), 
                      (-0.050722501, 1.623121253, -0.0878540731), (0.0, 2.0, 0.0), 
                      (-0.050722501, 1.623121253, -0.0878540731), 
                      (-0.1014450738, 1.623121253, -1.61e-08), 
                      (0.0, 2.0, 0.0), (-0.1014450738, 1.623121253, -1.61e-08), 
                      (-0.0507225729, 1.623121253, 0.0878540012), (0.0, 2.0, 0.0), 
                      (0.0, 0.0, 0.0), (0.0, 0.0, 0.0) ]
        
        crv1 = pm.curve(d=1, p=cv_pos_list1, n=self.control_name)              
        crv2 = pm.curve(d=1, p=cv_pos_list2, n=self.control_name+"1")       
        crv3 = pm.curve(d=1, p=cv_pos_list3, n=self.control_name+"2")        
        crv4 = pm.curve(d=1, p=cv_pos_list4, n=self.control_name+"3")
        
        
        pm.parent(crv2.getShape(), crv3.getShape(), crv4.getShape(), crv1, shape=True, add=True)
        pm.delete(crv2, crv3, crv4)
        
        self.control = crv1
            
        self.__finalize_ctrl()
        
        for s in self.control.getShapes():
            s.overrideEnabled.set(1)
            s.overrideRGBColors.set(1)
            
        self.control.getShapes()[0].overrideColorRGB.set(sett.colors["white"])
        self.control.getShapes()[1].overrideColorRGB.set(sett.colors["red"])
        self.control.getShapes()[2].overrideColorRGB.set(sett.colors["green"])
        self.control.getShapes()[3].overrideColorRGB.set(sett.colors["blue"])
    
    
    def __build_name(self):
        '''
        This method creates the name for the control
        '''
        self.control_name = name_utils.build_unique_name(self.base_name, self.side, 
                                                       sett.suffixes["ctrl"])
    
    
    def __finalize_ctrl(self):
        '''
        This method orients, scales and zeroes out the control
        '''
    
        self.__aim_ctrl()
        if self.size != 1.0:
            for s in self.control.getShapes():
                pm.scale(s.cv, self.size, self.size, self.size, r=True)
    
        pm.delete(self.control, ch=True)
    
        self.control_grp = xform_utils.zero(self.control)
    
        if self.ctrl_color:
            self.__set_color()
    
    
    def __aim_ctrl(self):
        '''
        This method orients the control based on the provided aim_axis
        '''
    
        y = 0
        z = 0
    
        if self.aim_axis == "y":
            z = 90
        elif self.aim_axis == "z":
            y = -90
    
        for s in self.control.getShapes():
            pm.rotate(s.cv, 0, y, z, r=True)   
    
    
    def __set_color(self):
        '''
        This method applies color to the control
        '''
        if self.ctrl_color not in sett.colors:
            om.MGlobal.displayError("Color name is not valid")
            return
    
        self.control.overrideEnabled.set(1)
        self.control.overrideRGBColors.set(1)
        self.control.overrideColorRGB.set(sett.colors[self.ctrl_color])
    
        for s in self.control.getShapes():
            s.overrideEnabled.set(1)
            s.overrideRGBColors.set(1)
            s.overrideColorRGB.set(sett.colors[self.ctrl_color])
    
    
    @staticmethod
    def get_ctrls_data():
        '''
        This metod gathers data (shape nodes, degree, cv positions) 
        of multiple selected curves into a list of dictionaries (one dict per curve)
        @return [dict]
        '''
        curves = [y for y in 
                  [ x for x in pm.selected() if x.getShape()] 
                  if y.getShape().nodeType() == 'nurbsCurve']
        if not curves:
            return None
    
        curves_data = []
    
        for cr in curves:
    
            shapes = pm.listRelatives(cr, s=1)
            if not shapes:
                continue
    
            degree_list = []
            spans_list = []
            cv_count_list = []
            cv_pos_list = []
            for sh in shapes:
                degree = sh.attr("degree").get()
                degree_list.append(degree)
    
                spans = sh.attr("spans").get()
                spans_list.append(spans)
    
                cv_count = degree+spans               
                form = sh.attr("form").get()
                if form == 2:
                    cv_count = spans    
                cv_count_list.append(cv_count) 
    
                pos = []
                for c in range(cv_count):
                    p = tuple(pm.pointPosition(f"{sh}.cv[{c}]", local=True))
                    pos.append(p)                   
                cv_pos_list.append(pos)
    
            curve_dict = {}
            curve_dict["name"] = cr.name()
            curve_dict["shapes"] = [sh.name() for sh in shapes]
            curve_dict["degrees"] = degree_list
            curve_dict["cvPositions"] = cv_pos_list
    
    
            curves_data.append(curve_dict)
    
    
    
        return curves_data
    
    @staticmethod
    def print_ctrl_data(elem_in_line=3, precision=0.0000000001):
        '''
        This metod prints out curve data (shape nodes, degree, cv positions) in a nice way  
        Works on single selection
        @param elem_in_line: int, how many cv positions should be printed in a single line
        @param precision: float, represents precision to which cv positions should be rounded 
        '''
        cr = None
        if (pm.selected() and 
            pm.selected()[0].getShape() and 
            pm.selected()[0].getShape().nodeType() == 'nurbsCurve'):
            cr = pm.selected()[0]
        if not cr:
            raise ValueError("No nurbs curves selected.") 
    
        shapes = pm.listRelatives(cr, s=1)    
        degree_list = []
        spans_list = []
        cv_count_list = []
        form_list = []
        cv_pos_list = []
        for sh in shapes:
            degree = sh.attr("degree").get()
            degree_list.append(degree)
    
            spans = sh.attr("spans").get()
            spans_list.append(spans)
    
            cv_count = degree+spans               
            form = sh.attr("form").get()
            if form == 2:
                cv_count = spans    
            cv_count_list.append(cv_count) 
            form_list.append(form)
    
            pos = []
            round_pos = int(math.log(precision,0.1))
            for c in range(cv_count):
                p = tuple(pm.pointPosition( f"{sh}.cv[{c}]", local=True))
                p = ( round(p[0],round_pos), 
                      round(p[1],round_pos), 
                      round(p[2],round_pos) )
                pos.append(p)                   
            cv_pos_list.append(pos)
        
        print("-----------")
        print(f"Control name: {cr}")
    
        for sh, d, f, cv_pl in zip(shapes, degree_list, form_list, cv_pos_list):
            print("-----------")
            print (f"Shape node: {sh}")
            print (f"Degree: {d}")
            print (f"Form: {f}")
    
            i = 0
            while i < len(cv_pl):
                line =  ""
                if (i)%elem_in_line == 0:        
                    for i in range(i,i+elem_in_line):
                        if i == 0:
                            line += "[ "+str(cv_pl[i])+", "
                        elif i == len(cv_pl)-1:
                            line += str(cv_pl[i])+" ]"
                        elif i < len(cv_pl):
                            line += str(cv_pl[i])+", "
                    print (line)
                i+=1
